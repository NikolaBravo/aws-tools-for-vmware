{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Tools for VMware \u00b6 Tools and sample code primarily intended for VMware Cloud on AWS. License \u00b6 This library is licensed under the Apache 2.0 License.","title":"Home"},{"location":"#aws-tools-for-vmware","text":"Tools and sample code primarily intended for VMware Cloud on AWS.","title":"AWS Tools for VMware"},{"location":"#license","text":"This library is licensed under the Apache 2.0 License.","title":"License"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/","text":"Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 \u00b6 SYNOPSIS \u00b6 Upgrade a standalone SQL Server Database Engine instance in-place. SYNTAX \u00b6 Local (Default) \u00b6 Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-WhatIf] [-Confirm] [<CommonParameters>] Remote: VM by Name \u00b6 Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-Credential] <PSCredential> -VmName <String[]> [-WhatIf] [-Confirm] [<CommonParameters>] Remote: VM by ID \u00b6 Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-Credential] <PSCredential> [-VmID] <String[]> [-WhatIf] [-Confirm] [<CommonParameters>] DESCRIPTION \u00b6 What this tool does \u00b6 This will perform an impactful , in-place, major version upgrade, such as SQL Server 2008 SP4 -> 2017 or 2008 R2 SP3 -> 2016, on a standalone SQL Server Database Engine instance on a Windows operating system. It can be run either locally, or remotely if deployed on a Windows VM in a vSphere environment such as VMware Cloud on AWS. You must supply your own SQL Server installation media and product key / license. The compatibility level of each database deployed on the target SQL Server instance will not be modified by this script, and should remain the same, but please test thoroughly. Please see the links below for additional resources such as Microsoft's best practices for planning your SQL Server instance upgrades, breaking changes and backwards compatibility, et cetera. Again, the upgrade process is impactful, so please test thoroughly and plan for application downtime. What this tool does not do \u00b6 !!! danger \"Backups are NOT included\" Backups are NOT included. Please make sure that you have implemented and verified proper backups, and that you have a recovery plan established that meets the recovery plan objective (RPO) and recovery time objective (RTO). This tool does not accommodate the intricacies of upgrading any high availability (HA) SQL Server instance types including: Replicated Databases Mirrored Databases Log Shipping Instances Failover Cluster Instances (FCI) AlwaysOn Availability Groups (AAG) This tool does not accommodate edition upgrades within the same version of SQL Server either. The checks run prior to the upgrade cannot test for every eventuality. In fact, most of the requirements and compatibility testing is delegated to Microsoft's SQL Server installation media since it was built with a robust testing framework. Please test thoroughly. Security \u00b6 To reduce the risk of unintended code execution, a file hash must be supplied for the setup file, which will be compared to a file hash of the specified setup file in an attempt to confirm file integrity and that the correct media has been loaded before launching the upgrade. Additionally, a few properties will be checked in an attempt to confirm that a SQL Server setup file has been specified. Local upgrades \u00b6 For local upgrades, this script requires elevated privileges and must be run from PowerShell launched with the 'Run as Administrator' option. Remote upgrades \u00b6 For VMware PowerCLI-based remote upgrades, HTTPS (443/tcp) connectivity is required to the ESXi hosts as well as vCenter for executing commands in the VM's guest operating system via the VMware Guest Operations API. This connectivity is not permitted by default, such as in VMware Cloud on AWS, but can be configured. This tool does not attempt to install or import the required PowerCLI modules, nor does it attempt to establish a PowerCLI session with vCenter. For VMware PowerCLI installation instructions, please see: https://www.powershellgallery.com/packages/VMware.PowerCLI/ . Once installed, run `Import-Module -Name 'VMware.VimAutomation.Core'` to import the subset of modules required. To learn more about how to establish a PowerCLI session, run `Get-Help -Name 'Connect-VIServer' -Detailed`, which includes a few examples. All target VMs must be powered on, and VMware Tools must be installed and running in the guest operating system of each Windows VM. The supplied credentials will be used on each VM to access the guest operating system, and must have administrative privileges. Because feature: https://powercli.ideas.aha.io/ideas/PCLI-I-101 has neither been accepted nor released by the PowerCLI team, Windows User Account Control (UAC) must be disabled in each guest operating system as well. Multiple VMs can be specified in the same command for batch upgrades via an array of VM IDs or names, as well as wildcard globbing of VM names; however, the SQL Server instance on each VM is upgraded iteratively, not concurrently. Please plan accordingly. EXAMPLES \u00b6 EXAMPLE 1 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms -WhatIf Performs a 'dry run test' of a local, in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) that would install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA256 file hashes. Since a product key / license was not supplied, the instance would be upgraded into Evaluation mode unless upgraded to SQL Server Express edition. EXAMPLE 2 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms Implements the previous example. Since a product key / license was not supplied, the instance will be upgraded into Evaluation mode unless upgraded to SQL Server Express edition. EXAMPLE 3 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'E:\\setup.exe' -FileHash $md5FileHash -Algorithm 'MD5' -InstanceName 'SQLEXPRESS' -InstanceDirectory 'D:\\MSSQL' -ProductKey $productKey -IAcceptSqlServerLicenseTerms Performs a local, in-place upgrade of the SQLEXPRESS SQL Server Database Engine instance that will install in the specified directory, validates the integrity of the specified SQL Server setup file by comparing the MD5 file hashes, and applies the specified product key. EXAMPLE 4 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 'E:\\setup.exe' $md5FileHash 'MD5' 'SQLEXPRESS' 'D:\\MSSQL' $productKey $true The same in-place upgrade as in the example above using positional arguments. EXAMPLE 5 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'O:\\setup.exe' -FileHash $md5FileHash -Algorithm 'MD5' -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) -VmName 'SQL1', 'MSSQL*' Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on the SQL1 VM, as well as any VM with a name starting 'MSSQL' (due to the '*' wildcard). It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the MD5 file hashes. EXAMPLE 6 \u00b6 ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha512FileHash -Algorithm 'SHA512' -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) -VmID 'VirtualMachine-vm-42' Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on the VM with MoRef ID 'VirtualMachine-vm-42'. It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA512 file hashes. EXAMPLE 7 \u00b6 ( Get-VM -Name '*SQL*' ).ID | ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on all VMs with 'SQL' in the name. It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA256 file hashes. PARAMETERS \u00b6 -FilePath \u00b6 Specifies the path to the SQL Server installation media. Example: D:\\setup.exe Type : System.IO.FileInfo Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -FileHash \u00b6 Specifies the expected SQL Server setup file hash. This can be obtained via the `Get-FileHash` cmdlet, the `certutil.exe -HashFile` command, or similar tools. Type : System.String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Algorithm \u00b6 Specifies the setup file hash algorithm. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : SHA256 Accept pipeline input : False Accept wildcard characters : False -InstanceName \u00b6 Specifies the target SQL Server instance name. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : MSSQLSERVER Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -InstanceDirectory \u00b6 Specifies a non-default installation directory for shared components. Type : System.IO.FileInfo Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -ProductKey \u00b6 Specifies the product key for the edition of SQL Server. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -IAcceptSqlServerLicenseTerms \u00b6 Required to acknowledge acceptance of Microsoft's license terms for SQL Server. Reference: https://docs.microsoft.com/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt#Upgrade Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : Required : True Position : 7 Default value : False Accept pipeline input : False Accept wildcard characters : False -Credential \u00b6 Specifies the Windows guest operating system credentials with administrative rights. Used for updating the SQL Server instance. Type : System.Management.Automation.PSCredential Parameter Sets : Remote : VM by Name, Remote : VM by ID Aliases : Required : True Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False -VmID \u00b6 Specifies the vSphere managed object reference identifier (MoRef ID) of one or more target VMs. Example: VirtualMachine-vm-431 Type : System.String[] Parameter Sets : Remote : VM by ID Aliases : ID Required : True Position : 9 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -VmName \u00b6 The name of one or more target VMs. Accepts wildcard characters. Example: SQL1, MSSQL* Type : System.String[] Parameter Sets : Remote : VM by Name Aliases : Name Required : True Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : True -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters ( http://go.microsoft.com/fwlink/?LinkID=113216 ). INPUTS \u00b6 System.String \u00b6 OUTPUTS \u00b6 System.String \u00b6 NOTES \u00b6 Version: 0.1.0 RELATED LINKS \u00b6 https://awslabs.github.io/aws-tools-for-vmware/powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/ https://github.com/awslabs/aws-tools-for-vmware/blob/master/powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 https://docs.microsoft.com/sql/database-engine/install-windows/supported-version-and-edition-upgrades https://docs.microsoft.com/sql/database-engine/install-windows/upgrade-database-engine https://docs.microsoft.com/sql/database-engine/install-windows/plan-and-test-the-database-engine-upgrade-plan https://docs.microsoft.com/sql/sql-server/install/hardware-and-software-requirements-for-installing-sql-server https://docs.microsoft.com/sql/database-engine/sql-server-database-engine-backward-compatibility https://github.com/awslabs/aws-tools-for-vmware/issues/new https://console.aws.amazon.com/support/home#/case/create?issueType=technical","title":"Upgrade SQL Server Standalone Database Engine Instance"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#upgrade-sqlserverstandalonedatabaseengineinstanceps1","text":"","title":"Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#synopsis","text":"Upgrade a standalone SQL Server Database Engine instance in-place.","title":"SYNOPSIS"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#syntax","text":"","title":"SYNTAX"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#local-default","text":"Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-WhatIf] [-Confirm] [<CommonParameters>]","title":"Local (Default)"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#remote-vm-by-name","text":"Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-Credential] <PSCredential> -VmName <String[]> [-WhatIf] [-Confirm] [<CommonParameters>]","title":"Remote: VM by Name"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#remote-vm-by-id","text":"Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 [-FilePath] <FileInfo> [-FileHash] <String> [[-Algorithm] <String>] [[-InstanceName] <String>] [[-InstanceDirectory] <FileInfo>] [[-ProductKey] <String>] [-IAcceptSqlServerLicenseTerms] [-Credential] <PSCredential> [-VmID] <String[]> [-WhatIf] [-Confirm] [<CommonParameters>]","title":"Remote: VM by ID"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#description","text":"","title":"DESCRIPTION"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#what-this-tool-does","text":"This will perform an impactful , in-place, major version upgrade, such as SQL Server 2008 SP4 -> 2017 or 2008 R2 SP3 -> 2016, on a standalone SQL Server Database Engine instance on a Windows operating system. It can be run either locally, or remotely if deployed on a Windows VM in a vSphere environment such as VMware Cloud on AWS. You must supply your own SQL Server installation media and product key / license. The compatibility level of each database deployed on the target SQL Server instance will not be modified by this script, and should remain the same, but please test thoroughly. Please see the links below for additional resources such as Microsoft's best practices for planning your SQL Server instance upgrades, breaking changes and backwards compatibility, et cetera. Again, the upgrade process is impactful, so please test thoroughly and plan for application downtime.","title":"What this tool does"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#what-this-tool-does-not-do","text":"!!! danger \"Backups are NOT included\" Backups are NOT included. Please make sure that you have implemented and verified proper backups, and that you have a recovery plan established that meets the recovery plan objective (RPO) and recovery time objective (RTO). This tool does not accommodate the intricacies of upgrading any high availability (HA) SQL Server instance types including: Replicated Databases Mirrored Databases Log Shipping Instances Failover Cluster Instances (FCI) AlwaysOn Availability Groups (AAG) This tool does not accommodate edition upgrades within the same version of SQL Server either. The checks run prior to the upgrade cannot test for every eventuality. In fact, most of the requirements and compatibility testing is delegated to Microsoft's SQL Server installation media since it was built with a robust testing framework. Please test thoroughly.","title":"What this tool does not do"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#security","text":"To reduce the risk of unintended code execution, a file hash must be supplied for the setup file, which will be compared to a file hash of the specified setup file in an attempt to confirm file integrity and that the correct media has been loaded before launching the upgrade. Additionally, a few properties will be checked in an attempt to confirm that a SQL Server setup file has been specified.","title":"Security"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#local-upgrades","text":"For local upgrades, this script requires elevated privileges and must be run from PowerShell launched with the 'Run as Administrator' option.","title":"Local upgrades"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#remote-upgrades","text":"For VMware PowerCLI-based remote upgrades, HTTPS (443/tcp) connectivity is required to the ESXi hosts as well as vCenter for executing commands in the VM's guest operating system via the VMware Guest Operations API. This connectivity is not permitted by default, such as in VMware Cloud on AWS, but can be configured. This tool does not attempt to install or import the required PowerCLI modules, nor does it attempt to establish a PowerCLI session with vCenter. For VMware PowerCLI installation instructions, please see: https://www.powershellgallery.com/packages/VMware.PowerCLI/ . Once installed, run `Import-Module -Name 'VMware.VimAutomation.Core'` to import the subset of modules required. To learn more about how to establish a PowerCLI session, run `Get-Help -Name 'Connect-VIServer' -Detailed`, which includes a few examples. All target VMs must be powered on, and VMware Tools must be installed and running in the guest operating system of each Windows VM. The supplied credentials will be used on each VM to access the guest operating system, and must have administrative privileges. Because feature: https://powercli.ideas.aha.io/ideas/PCLI-I-101 has neither been accepted nor released by the PowerCLI team, Windows User Account Control (UAC) must be disabled in each guest operating system as well. Multiple VMs can be specified in the same command for batch upgrades via an array of VM IDs or names, as well as wildcard globbing of VM names; however, the SQL Server instance on each VM is upgraded iteratively, not concurrently. Please plan accordingly.","title":"Remote upgrades"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#examples","text":"","title":"EXAMPLES"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-1","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms -WhatIf Performs a 'dry run test' of a local, in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) that would install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA256 file hashes. Since a product key / license was not supplied, the instance would be upgraded into Evaluation mode unless upgraded to SQL Server Express edition.","title":"EXAMPLE 1"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-2","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms Implements the previous example. Since a product key / license was not supplied, the instance will be upgraded into Evaluation mode unless upgraded to SQL Server Express edition.","title":"EXAMPLE 2"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-3","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'E:\\setup.exe' -FileHash $md5FileHash -Algorithm 'MD5' -InstanceName 'SQLEXPRESS' -InstanceDirectory 'D:\\MSSQL' -ProductKey $productKey -IAcceptSqlServerLicenseTerms Performs a local, in-place upgrade of the SQLEXPRESS SQL Server Database Engine instance that will install in the specified directory, validates the integrity of the specified SQL Server setup file by comparing the MD5 file hashes, and applies the specified product key.","title":"EXAMPLE 3"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-4","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 'E:\\setup.exe' $md5FileHash 'MD5' 'SQLEXPRESS' 'D:\\MSSQL' $productKey $true The same in-place upgrade as in the example above using positional arguments.","title":"EXAMPLE 4"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-5","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'O:\\setup.exe' -FileHash $md5FileHash -Algorithm 'MD5' -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) -VmName 'SQL1', 'MSSQL*' Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on the SQL1 VM, as well as any VM with a name starting 'MSSQL' (due to the '*' wildcard). It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the MD5 file hashes.","title":"EXAMPLE 5"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-6","text":"./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha512FileHash -Algorithm 'SHA512' -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) -VmID 'VirtualMachine-vm-42' Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on the VM with MoRef ID 'VirtualMachine-vm-42'. It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA512 file hashes.","title":"EXAMPLE 6"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#example-7","text":"( Get-VM -Name '*SQL*' ).ID | ./Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 -FilePath 'D:\\setup.exe' -FileHash $sha256FileHash -IAcceptSqlServerLicenseTerms -Credential (Get-Credential) Performs a remote, PowerCLI-based in-place upgrade of the default SQL Server Database Engine instance (MSSQLSERVER) on all VMs with 'SQL' in the name. It will install in the default directory, and validates the integrity of the specified SQL Server setup file by comparing the SHA256 file hashes.","title":"EXAMPLE 7"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#parameters","text":"","title":"PARAMETERS"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-filepath","text":"Specifies the path to the SQL Server installation media. Example: D:\\setup.exe Type : System.IO.FileInfo Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FilePath"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-filehash","text":"Specifies the expected SQL Server setup file hash. This can be obtained via the `Get-FileHash` cmdlet, the `certutil.exe -HashFile` command, or similar tools. Type : System.String Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FileHash"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-algorithm","text":"Specifies the setup file hash algorithm. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : SHA256 Accept pipeline input : False Accept wildcard characters : False","title":"-Algorithm"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-instancename","text":"Specifies the target SQL Server instance name. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 4 Default value : MSSQLSERVER Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-InstanceName"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-instancedirectory","text":"Specifies a non-default installation directory for shared components. Type : System.IO.FileInfo Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-InstanceDirectory"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-productkey","text":"Specifies the product key for the edition of SQL Server. Type : System.String Parameter Sets : (All) Aliases : Required : False Position : 6 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-ProductKey"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-iacceptsqlserverlicenseterms","text":"Required to acknowledge acceptance of Microsoft's license terms for SQL Server. Reference: https://docs.microsoft.com/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt#Upgrade Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : Required : True Position : 7 Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-IAcceptSqlServerLicenseTerms"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-credential","text":"Specifies the Windows guest operating system credentials with administrative rights. Used for updating the SQL Server instance. Type : System.Management.Automation.PSCredential Parameter Sets : Remote : VM by Name, Remote : VM by ID Aliases : Required : True Position : 8 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Credential"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-vmid","text":"Specifies the vSphere managed object reference identifier (MoRef ID) of one or more target VMs. Example: VirtualMachine-vm-431 Type : System.String[] Parameter Sets : Remote : VM by ID Aliases : ID Required : True Position : 9 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-VmID"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-vmname","text":"The name of one or more target VMs. Accepts wildcard characters. Example: SQL1, MSSQL* Type : System.String[] Parameter Sets : Remote : VM by Name Aliases : Name Required : True Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : True","title":"-VmName"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : System.Management.Automation.SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters ( http://go.microsoft.com/fwlink/?LinkID=113216 ).","title":"CommonParameters"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#inputs","text":"","title":"INPUTS"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#systemstring","text":"","title":"System.String"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#outputs","text":"","title":"OUTPUTS"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#systemstring_1","text":"","title":"System.String"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#notes","text":"Version: 0.1.0","title":"NOTES"},{"location":"powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/#related-links","text":"https://awslabs.github.io/aws-tools-for-vmware/powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1/ https://github.com/awslabs/aws-tools-for-vmware/blob/master/powershell/Upgrade-SqlServerStandaloneDatabaseEngineInstance.ps1 https://docs.microsoft.com/sql/database-engine/install-windows/supported-version-and-edition-upgrades https://docs.microsoft.com/sql/database-engine/install-windows/upgrade-database-engine https://docs.microsoft.com/sql/database-engine/install-windows/plan-and-test-the-database-engine-upgrade-plan https://docs.microsoft.com/sql/sql-server/install/hardware-and-software-requirements-for-installing-sql-server https://docs.microsoft.com/sql/database-engine/sql-server-database-engine-backward-compatibility https://github.com/awslabs/aws-tools-for-vmware/issues/new https://console.aws.amazon.com/support/home#/case/create?issueType=technical","title":"RELATED LINKS"}]}